<?php
/**
 * @file
 * Primary module file.
 */

/**
 * Implements hook_help().
 */
function theme_utils_help($path, $arg) {
  switch ($path) {
    case 'admin/config/user-interface/theme_utils':
      return '<p>' . t('Select the options below that you want enabled.') . '</p>';

    case 'admin/help#theme_utils':
      $output = '';
      $output .= '<p>' . t('Various utilities that theming a bit easier.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_menu().
 */
function theme_utils_menu() {
  $items['admin/config/user-interface/theme_utils'] = array(
    'title' => 'Theme Utils',
    'description' => 'Configure settings for Theme Utils.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('theme_utils_settings'),
    'access arguments' => array('administer site configuration'),
  );

  return $items;
}

/**
 * Form builder function for module settings.
 */
function theme_utils_settings() {
  $form['theme_utils_block_title_class'] = array(
    '#type' => 'checkbox',
    '#title' => t('Block title to class'),
    '#default_value' => variable_get('theme_utils_block_title_class', 1),
    '#description' => t('Adds the block\'s title to the block\'s set of HTML classes. Useful when theming to quickly identify and target individual blocks.'),
  );
  $form['theme_utils_region_body_class'] = array(
    '#type' => 'checkbox',
    '#title' => t('Regions to body class'),
    '#default_value' => variable_get('theme_utils_region_body_class', 1),
    '#description' => t('Adds the page\'s active regions to the body element\'s list of HTML classes.'),
  );
  // Verify the library is installed.
  $disabled = FALSE;
  $extra_description = '';
  if (!file_exists(__DIR__ . '/php-css-parser/lib/Sabberworm/CSS/Parser.php')) {
    $disabled = TRUE;
    $extra_description = t('Required library not found. PHP-CSS-Parser is either not installed or is incorrectly installed.');
  }
  $form['theme_utils_media_query'] = array(
    '#type' => 'checkbox',
    '#disabled' => $disabled ? 1 : 0,
    '#title' => t('Display @media query'),
    '#default_value' => variable_get('theme_utils_media_query', !$disabled),
    '#description' => t('Displays the active @media query in the browser window.') . '<br>' . $extra_description,
  );
  $form['theme_utils_viewport_dimensions'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display viewport dimensions'),
    '#default_value' => variable_get('theme_utils_viewport_dimensions', 1),
    '#description' => t('Displays the viewport\'s dimensions in the browser window.'),
  );

  return system_settings_form($form);
}

/**
 * Implementation of hook_preprocess_HOOK().
 *
 * Extend block's HTML classes with the block's title.
 */
function theme_utils_preprocess_block(&$vars) {
  if ($setting = variable_get('theme_utils_block_title_class', 1)) {
    ctools_include('cleanstring', 'ctools', 'includes');

    $block = $vars['block'];

    // Use the block's title/subject if available,
    // otherwise use the delta value.
    if (strlen($block->subject) > 0) {
      $title = $block->subject;
    }
    else {
      $title = $block->delta;
    }

    // Remove any non-alphanumeric characters from title
    // and replace whitespace with hyphens.
    $title = ctools_cleanstring($title, array('lower case' => TRUE));

    // Add the block's module to the beginning of the class.
    $module = 'block-' . $block->module;

    $class[] = $module . '-' . $title;
    $vars['classes_array'] = array_merge($vars['classes_array'], $class);
  }
}

/**
 * Implementation of hook_preprocess_HOOK().
 *
 * Extend body's HTML classes with regions in use on a given page.
 */
function theme_utils_preprocess_html(&$vars) {
  if ($setting = variable_get('theme_utils_region_body_class', 1)) {
    if (isset($vars['page'])) {
      foreach ($vars['page'] as $region) {
        if (is_array($region) && isset($region['#region'])) {
          $vars['classes_array'][] = 'with-' . $region['#region'];
        }
      }
    }
  }
}

/**
 * Implementation of hook_page_build().
 *
 * Show the media query and/or the browser viewport dimensions.
 */
function theme_utils_page_build(&$page) {
  $setting = array();
  $should_attach = FALSE;

  if (variable_get('theme_utils_media_query', 1)) {
    if ($media_queries = theme_utils_get_media_queries()) {
    $css = '';
    $js = '';
    foreach ($media_queries as $idx => $query) {
      $css .= '@media ' . $query . ' { ';
      $css .= ' #theme-utils-media-query .query-' . $idx . ' { ';
      $css .= '  display: block; ';
      $css .= ' } ';
      $css .= '} ';

      $setting['themeUtils']['mediaQueries'][] = array(
        'itemNum' => $idx,
        'query' => $query,
      );
    }

    // Inject inline css into page.
    drupal_add_css($css, array('type' => 'inline', 'weight' => '9999'));
    $should_attach = TRUE;
    }
  }

  if (variable_get('theme_utils_viewport_dimensions', 1)) {
    $setting['themeUtils']['browserViewport'] = array(
      'show' => 'true',
    );
    $should_attach = TRUE;
  }

  if ($should_attach) {
    $path = drupal_get_path('module', 'theme_utils');
    drupal_add_js($setting, 'setting');
    drupal_add_js($path . '/theme_utils.js', 'file');
    drupal_add_css($path . '/theme_utils.css', 'file');
  }
}

/**
 * Get all media queries from all stylesheets attached to the page.
 */
function theme_utils_get_media_queries() {
  $media_queries = array();

  // Use cache since scanning every css file is time consuming.
  $cid = 'theme_utils_media_queries/' . current_path();
  if ($cache = cache_get($cid, 'cache')) {
    $media_queries = $cache->data;
  }
  else {
    if (!file_exists(__DIR__ . '/php-css-parser/lib/Sabberworm/CSS/Parser.php')) {
      return FALSE;
    }
    // Get all css files from page.
    $css_files = theme_utils_get_css_files();
    require_once 'php-css-parser/lib/Sabberworm/CSS/Parser.php';

    foreach ($css_files as $file) {
      // Load each css file in parser.
      $parser = new Sabberworm\CSS\Parser(file_get_contents(DRUPAL_ROOT . '/' . $file['data']));
      $doc = $parser->parse();
      $contents = $doc->getContents();

      foreach ($contents as $key => $value) {
        // Only want @media queries.
        if ($value instanceof Sabberworm\CSS\CSSList\MediaQuery) {
          $media_queries[] = $value->getQuery();
        }
      }
    }

    // Store for 1 hour.
    cache_set($cid, $media_queries, 'cache', time() + 60*60);
  }

  return $media_queries;
}

/**
 * Gets all stylesheets attached to the page.
 */
function theme_utils_get_css_files() {
  $css = drupal_add_css();

  // Sort CSS items, so that they appear in the correct order.
  uasort($css, 'drupal_sort_css_js');

  // Remove the overridden CSS files. Later CSS files override former ones.
  $previous_item = array();
  foreach ($css as $key => $item) {
    if ($item['type'] == 'file') {
      // If defined, force a unique basename for this file.
      $basename = isset($item['basename']) ? $item['basename'] : drupal_basename($item['data']);
      if (isset($previous_item[$basename])) {
        // Remove the previous item that shared the same base name.
        unset($css[$previous_item[$basename]]);
      }
      $previous_item[$basename] = $key;
    }
  }

  return $css;
}

/**
 * Autoload PHP-CSS-Parser classes.
 */
spl_autoload_register(function($class) {
  $file = __DIR__ . '/php-css-parser/lib/' . strtr($class, '\\', '/') . '.php';
  if (file_exists($file)) {
    require $file;
    return TRUE;
  }
});
